#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <FS.h>
#include <SPIFFS.h>

// OLED configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Pin definitions
#define SDA_PIN 21
#define SCL_PIN 22
#define BTN_DOWN 19
#define BTN_UP 18
#define BTN_ENTER 17

// Devil logo (same as provided)
const uint8_t DEVIL_LOGO[] PROGMEM = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x7f,0xfe,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xfe,0x01,0xff,0xff,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x7f,0x03,0xff,0xff,0xc0,0xfe,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x3f,0x07,0xff,0xff,0xe0,0xfc,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x3f,0xef,0xff,0xff,0xf7,0xfc,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x1f,0xef,0x7f,0xff,0xf7,0xf8,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x1f,0xef,0xff,0xff,0xf7,0xf8,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x1f,0xef,0xff,0xff,0xf7,0xf8,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x0f,0x9f,0xff,0xff,0xf9,0xf0,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x07,0x9f,0xff,0xff,0xf9,0xe0,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xf0,0xe7,0xff,0xff,0xe7,0x0f,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x70,0xe3,0xff,0xff,0xc7,0x1e,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x3c,0xe1,0xff,0xff,0x87,0x3c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x3e,0xf0,0xff,0xff,0x0f,0x7c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x36,0xe0,0x7d,0xbe,0x07,0x6c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x32,0xe0,0x39,0x9c,0x07,0x4c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x30,0xe0,0x19,0x98,0x07,0x0c,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x18,0xf0,0x01,0x80,0x0f,0x18,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x18,0xf8,0x03,0xc0,0x1f,0x18,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x1c,0xfc,0x17,0xe0,0x3f,0x38,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x1e,0xfe,0x1f,0xf8,0x7f,0x78,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x0e,0x3f,0xff,0xff,0xfc,0x70,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x06,0x3f,0xf7,0xef,0xfe,0x60,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xf7,0xe7,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xef,0xf7,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x10,0xef,0xf7,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x77,0xee,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x33,0xc4,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x01,0x80,0x38,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x1e,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x01,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xc0,0x03,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xe0,0x07,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

// Menu and state variables
const char* menu_items[] = {"Random (Slow)", "Random (Fast)", "Custom SSID", "About"};
int current_menu = 0;
volatile bool menu_active = true;
volatile bool spamming = false;
String custom_ssids[64]; // Array for 64 SSIDs from wlist.txt
int custom_ssid_count = 0;
const int num_ssids = 64; // Updated to 64 SSIDs for multi-SSID mode
String ssids[64]; // Array for 64 random SSIDs
TaskHandle_t displayTaskHandle = NULL;
TaskHandle_t wifiTaskHandle = NULL;

// Function prototypes
void displayLogoAnimation();
void displayMenu();
String generateRandomSSID();
void spamRandomSSIDSlow(void *pvParameters);
void spamCustomSSID(void *pvParameters);
void spamRandomSSIDFast(void *pvParameters);
void displayTask(void *pvParameters);
bool readSSIDList();

// Debounce variables
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 300;

void setup() {
    Serial.begin(115200);
    Wire.begin(SDA_PIN, SCL_PIN);
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("SSD1306 allocation failed"));
        for(;;);
    }
    display.clearDisplay();
    display.display();

    pinMode(BTN_DOWN, INPUT);
    pinMode(BTN_UP, INPUT);
    pinMode(BTN_ENTER, INPUT);

    // Initialize SPIFFS
    if (!SPIFFS.begin(true)) {
        Serial.println(F("SPIFFS Mount Failed"));
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(10, 20);
        display.println(F("SPIFFS Mount Failed"));
        display.display();
        for(;;);
    }

    // Read SSID list from file
    if (!readSSIDList()) {
        Serial.println(F("Failed to read wlist.txt"));
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(10, 20);
        display.println(F("Failed to read wlist.txt"));
        display.display();
        vTaskDelay(3000 / portTICK_PERIOD_MS);
    }

    WiFi.mode(WIFI_AP);
    WiFi.softAPdisconnect(true);

    // Generate initial SSIDs for multi-SSID mode
    for (int i = 0; i < num_ssids; i++) {
        ssids[i] = generateRandomSSID();
    }

    // Start display task
    xTaskCreatePinnedToCore(
        displayTask, "DisplayTask", 4096, NULL, 1, &displayTaskHandle, 0);

    // Show logo animation
    displayLogoAnimation();
}

void loop() {
    if (menu_active) {
        if (digitalRead(BTN_DOWN) == HIGH && (millis() - lastDebounceTime) > debounceDelay) {
            current_menu = (current_menu + 1) % 4;
            lastDebounceTime = millis();
        }
        if (digitalRead(BTN_UP) == HIGH && (millis() - lastDebounceTime) > debounceDelay) {
            current_menu = (current_menu - 1 + 4) % 4;
            lastDebounceTime = millis();
        }
        if (digitalRead(BTN_ENTER) == HIGH && (millis() - lastDebounceTime) > debounceDelay) {
            menu_active = false;
            if (menu_items[current_menu] == "Random (Slow)") {
                xTaskCreatePinnedToCore(spamRandomSSIDSlow, "spamRandomSSIDSlow", 4096, NULL, 2, &wifiTaskHandle, 1);
            } else if (menu_items[current_menu] == "Random (Fast)") {
                xTaskCreatePinnedToCore(spamRandomSSIDFast, "spamRandomSSIDFast", 4096, NULL, 2, &wifiTaskHandle, 1);
            } else if (menu_items[current_menu] == "Custom SSID") {
                xTaskCreatePinnedToCore(spamCustomSSID, "spamCustomSSID", 4096, NULL, 2, &wifiTaskHandle, 1);
            } else if (menu_items[current_menu] == "About") {
                display.clearDisplay();
                display.setTextSize(1);
                display.setTextColor(SSD1306_WHITE);
                display.setCursor(20, 20);
                display.println(F("Developer: UN4"));
                display.setCursor(20, 30);
                display.println(F("HW: ESP32"));
                display.setCursor(20, 40);
                display.println(F("v0.1"));
                display.display();
                vTaskDelay(3000 / portTICK_PERIOD_MS);
                menu_active = true;
            }
            lastDebounceTime = millis();
        }
    } else {
        if (digitalRead(BTN_DOWN) == HIGH && digitalRead(BTN_UP) == HIGH && (millis() - lastDebounceTime) > debounceDelay) {
            spamming = false;
            WiFi.softAPdisconnect(true);
            if (wifiTaskHandle != NULL) {
                vTaskDelete(wifiTaskHandle);
                wifiTaskHandle = NULL;
            }
            menu_active = true;
            lastDebounceTime = millis();
        }
    }
}

bool readSSIDList() {
    File file = SPIFFS.open("/wlist.txt", "r");
    if (!file) {
        Serial.println(F("Failed to open wlist.txt"));
        return false;
    }

    custom_ssid_count = 0;
    while (file.available() && custom_ssid_count < 64) {
        String line = file.readStringUntil('\n');
        line.trim();
        if (line.length() > 0) {
            custom_ssids[custom_ssid_count] = line;
            custom_ssid_count++;
        }
    }
    file.close();
    return custom_ssid_count > 0;
}

void displayLogoAnimation() {
    // Slide logo up from bottom to top
    for (int y = 0; y <= 64; y += 1) {
        display.clearDisplay();
        display.drawBitmap(0, y, DEVIL_LOGO, 128, 64, SSD1306_WHITE);
        display.display();
    }
    // Slide logo down from top to final position
    for (int y = 64; y >= 0; y -= 1) {
        display.clearDisplay();
        display.drawBitmap(0, y, DEVIL_LOGO, 128, 64, SSD1306_WHITE);
        display.display();
    }
    // Display final logo position
    display.clearDisplay();
    display.drawBitmap(0, 0, DEVIL_LOGO, 128, 64, SSD1306_WHITE);
    display.display();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
}

void displayMenu() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(20, 0);
    display.println(F("WiFi Frauder"));
    for (int i = 0; i < 4; i++) {
        display.setCursor(10, 20 + i * 10);
        if (i == current_menu) {
            display.print(F("> "));
        } else {
            display.print(F("  "));
        }
        display.println(menu_items[i]);
    }
    display.display();
}

String generateRandomSSID() {
    const char chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    String ssid = "";
    for (int i = 0; i < 8; i++) {
        ssid += chars[random(0, strlen(chars))];
    }
    return ssid;
}

void displayTask(void *pvParameters) {
    while (true) {
        if (menu_active && !spamming) {
            displayMenu();
        }
        vTaskDelay(100 / portTICK_PERIOD_MS);
    }
}

void spamRandomSSIDSlow(void *pvParameters) {
    spamming = true;
    WiFi.softAP("InitialSSID"); // Initialize AP
    while (spamming) {
        String ssid = generateRandomSSID();
        WiFi.softAP(ssid.c_str(), NULL, random(1, 12));
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(20, 20);
        display.println(F("Random SSID (Slow)"));
        display.setCursor(20, 40);
        display.println(ssid);
        display.display();
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
    WiFi.softAPdisconnect(true);
    vTaskDelete(NULL);
}

void spamCustomSSID(void *pvParameters) {
    spamming = true;
    WiFi.softAP("InitialSSID"); // Initialize AP
    if (custom_ssid_count == 0) {
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(10, 20);
        display.println(F("No SSIDs in wlist.txt"));
        display.display();
        vTaskDelay(2000 / portTICK_PERIOD_MS);
        spamming = false;
        menu_active = true;
        WiFi.softAPdisconnect(true);
        vTaskDelete(NULL);
        return;
    }
    while (spamming) {
        for (int i = 0; i < custom_ssid_count; i++) {
            if (!spamming) break;
            WiFi.softAP(custom_ssids[i].c_str(), NULL, random(1, 12));
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(SSD1306_WHITE);
            display.setCursor(10, 20);
            display.println(F("Custom SSID Spam"));
            display.setCursor(10, 40);
            display.println(custom_ssids[i]);
            display.display();
            vTaskDelay(100 / portTICK_PERIOD_MS);
        }
    }
    WiFi.softAPdisconnect(true);
    vTaskDelete(NULL);
}

void spamRandomSSIDFast(void *pvParameters) {
    spamming = true;
    WiFi.softAP("InitialSSID"); // Initialize AP
    while (spamming) {
        for (int i = 0; i < num_ssids; i++) {
            if (!spamming) break;
            WiFi.softAP(ssids[i].c_str(), NULL, random(1, 12));
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(SSD1306_WHITE);
            display.setCursor(10, 20);
            display.println(F("Random SSID (Fast)"));
            display.setCursor(10, 40);
            display.println(ssids[i]);
            display.display();
            vTaskDelay(100 / portTICK_PERIOD_MS);
        }
    }
    WiFi.softAPdisconnect(true);
    vTaskDelete(NULL);
}